Верхний регистр:
	Макросы
	Константы
	Значения перечислений
Нижний регистр:
	Переменные
	Функции
	типы данных (суффикс _t)
		typedef struct
		{
		   uint8_t pin;
		   uint16_t port;
		} led_info_t;
-------------------------------------------------------------------------
Никаких int, short, unsinged, long и т.д.
	Только uint8_t,  uint16_t, uint32_t
		и   int8_t,   int16_t,  int32_t
-------------------------------------------------------------------------
Макросы:
	#define TEST(x, y)		((x) << (y))
		Название - верхний регистр
		2 таба (таб - 4 пробела)
		Если есть аргумент - то в выражении он в скобках
		Имя макроса в верхнем регистре
-------------------------------------------------------------------------		
Перечисления:
	typedef enum
	{
		LED_STATE_OFF,
		LED_STATE_ON,
	} led_state_t;
	
	led_state_t:
	led_state имя
	_t - суффикс
	Названия значений перечисления начинаются с имени перечисления и в верхнем регистре
-------------------------------------------------------------------------	
Функции:
	/* static */ void led_state_set(led_state_t state)
	{
		// Setter
		{
			const int16_t state2 = state;
		}
		// Как можно быстрее выходить из функции
	}
	
	led_state_t led_state_get(int x)
	{
		if (x <= 10)
			return;
		if (x > 10)
		{
			// 15-20 строк
		}
	}
	
	led_state_set - led - название модуля, state - имя сущности или действия, set/get - команда
	Нижний регистр
-------------------------------------------------------------------------	
Переменные:
	// Глобальная переменная внутри модуля
	int8_t led_index = 10;
	
	led_state_t led_state_get(void)
	{
		// Локальная переменная
		int8_t index = 10;
		
		static int8_t counter = 10;
	}
-------------------------------------------------------------------------	
Инициализация глобальных переменных:
	Идеально: без инициалзиации - static __no_init uint8_t led_test;
	Приемлимо: инициалзиация нулем static uint8_t led_test = 0; // в секцию bss
	Плохо: инициалзиация не нулем static uint8_t led_test = 10; // секция в ОЗУ, + еще создается секция в ПЗУ инициалзиации

-------------------------------------------------------------------------
Никаких HAL и LL библиотек, только CMSIS
